name: Docker 构建并发布

on:
  push:
    branches: [ "master" ]
    # 也可以在发布标签时触发
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]
  # 允许手动触发工作流
  workflow_dispatch:

env:
  # 镜像名称，使用仓库名称
  IMAGE_NAME: ${{ github.repository }}
  # 使用 GitHub Container Registry
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 设置权限以使用 GITHUB_TOKEN 推送到 ghcr.io
    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取元数据并为镜像添加标签
      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # 根据事件类型生成标签:
          # - 如果是标签推送，使用语义版本标签
          # - 其他情况使用分支名称
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # 设置 Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 构建并推送 Docker 镜像
      - name: 构建并推送
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
